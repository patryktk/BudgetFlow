/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { CategoryResponse } from '../models/category-response';
import { deleteCategory } from '../fn/category/delete-category';
import { DeleteCategory$Params } from '../fn/category/delete-category';
import { editCategory } from '../fn/category/edit-category';
import { EditCategory$Params } from '../fn/category/edit-category';
import { getAllCategory } from '../fn/category/get-all-category';
import { GetAllCategory$Params } from '../fn/category/get-all-category';
import { saveCategory } from '../fn/category/save-category';
import { SaveCategory$Params } from '../fn/category/save-category';

@Injectable({ providedIn: 'root' })
export class CategoryService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `saveCategory()` */
  static readonly SaveCategoryPath = '/expenses/category';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `saveCategory()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  saveCategory$Response(params: SaveCategory$Params, context?: HttpContext): Observable<StrictHttpResponse<CategoryResponse>> {
    return saveCategory(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `saveCategory$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  saveCategory(params: SaveCategory$Params, context?: HttpContext): Observable<CategoryResponse> {
    return this.saveCategory$Response(params, context).pipe(
      map((r: StrictHttpResponse<CategoryResponse>): CategoryResponse => r.body)
    );
  }

  /** Path part for operation `getAllCategory()` */
  static readonly GetAllCategoryPath = '/expenses/category/getCategoriesByType';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllCategory()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  getAllCategory$Response(params: GetAllCategory$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<CategoryResponse>>> {
    return getAllCategory(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllCategory$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  getAllCategory(params: GetAllCategory$Params, context?: HttpContext): Observable<Array<CategoryResponse>> {
    return this.getAllCategory$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<CategoryResponse>>): Array<CategoryResponse> => r.body)
    );
  }

  /** Path part for operation `editCategory()` */
  static readonly EditCategoryPath = '/expenses/category/editCategory';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `editCategory()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  editCategory$Response(params: EditCategory$Params, context?: HttpContext): Observable<StrictHttpResponse<CategoryResponse>> {
    return editCategory(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `editCategory$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  editCategory(params: EditCategory$Params, context?: HttpContext): Observable<CategoryResponse> {
    return this.editCategory$Response(params, context).pipe(
      map((r: StrictHttpResponse<CategoryResponse>): CategoryResponse => r.body)
    );
  }

  /** Path part for operation `deleteCategory()` */
  static readonly DeleteCategoryPath = '/expenses/category/{categoryId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteCategory()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteCategory$Response(params: DeleteCategory$Params, context?: HttpContext): Observable<StrictHttpResponse<boolean>> {
    return deleteCategory(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteCategory$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteCategory(params: DeleteCategory$Params, context?: HttpContext): Observable<boolean> {
    return this.deleteCategory$Response(params, context).pipe(
      map((r: StrictHttpResponse<boolean>): boolean => r.body)
    );
  }

}
