/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { ExpenseCategory } from '../models/expense-category';
import { getAllExpenseCategory } from '../fn/expenses-category/get-all-expense-category';
import { GetAllExpenseCategory$Params } from '../fn/expenses-category/get-all-expense-category';
import { saveExpenseCategory } from '../fn/expenses-category/save-expense-category';
import { SaveExpenseCategory$Params } from '../fn/expenses-category/save-expense-category';

@Injectable({ providedIn: 'root' })
export class ExpensesCategoryService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `saveExpenseCategory()` */
  static readonly SaveExpenseCategoryPath = '/expenses/expenseCategory';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `saveExpenseCategory()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  saveExpenseCategory$Response(params: SaveExpenseCategory$Params, context?: HttpContext): Observable<StrictHttpResponse<ExpenseCategory>> {
    return saveExpenseCategory(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `saveExpenseCategory$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  saveExpenseCategory(params: SaveExpenseCategory$Params, context?: HttpContext): Observable<ExpenseCategory> {
    return this.saveExpenseCategory$Response(params, context).pipe(
      map((r: StrictHttpResponse<ExpenseCategory>): ExpenseCategory => r.body)
    );
  }

  /** Path part for operation `getAllExpenseCategory()` */
  static readonly GetAllExpenseCategoryPath = '/expenses/expenseCategory/getAll';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllExpenseCategory()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllExpenseCategory$Response(params?: GetAllExpenseCategory$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ExpenseCategory>>> {
    return getAllExpenseCategory(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllExpenseCategory$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllExpenseCategory(params?: GetAllExpenseCategory$Params, context?: HttpContext): Observable<Array<ExpenseCategory>> {
    return this.getAllExpenseCategory$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<ExpenseCategory>>): Array<ExpenseCategory> => r.body)
    );
  }

}
