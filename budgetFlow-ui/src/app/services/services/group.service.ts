/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { acceptInvitation } from '../fn/group/accept-invitation';
import { AcceptInvitation$Params } from '../fn/group/accept-invitation';
import { checkUserIsInAnyGroup } from '../fn/group/check-user-is-in-any-group';
import { CheckUserIsInAnyGroup$Params } from '../fn/group/check-user-is-in-any-group';
import { createGroup } from '../fn/group/create-group';
import { CreateGroup$Params } from '../fn/group/create-group';
import { deleteGroup } from '../fn/group/delete-group';
import { DeleteGroup$Params } from '../fn/group/delete-group';
import { getGroup } from '../fn/group/get-group';
import { GetGroup$Params } from '../fn/group/get-group';
import { GroupResponseForExpenseService } from '../models/group-response-for-expense-service';
import { GroupResponseWithUser } from '../models/group-response-with-user';
import { inviteToGroup } from '../fn/group/invite-to-group';
import { InviteToGroup$Params } from '../fn/group/invite-to-group';

@Injectable({ providedIn: 'root' })
export class GroupService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getGroup()` */
  static readonly GetGroupPath = '/groups';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getGroup()` instead.
   *
   * This method doesn't expect any request body.
   */
  getGroup$Response(params?: GetGroup$Params, context?: HttpContext): Observable<StrictHttpResponse<GroupResponseWithUser>> {
    return getGroup(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getGroup$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getGroup(params?: GetGroup$Params, context?: HttpContext): Observable<GroupResponseWithUser> {
    return this.getGroup$Response(params, context).pipe(
      map((r: StrictHttpResponse<GroupResponseWithUser>): GroupResponseWithUser => r.body)
    );
  }

  /** Path part for operation `createGroup()` */
  static readonly CreateGroupPath = '/groups';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createGroup()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createGroup$Response(params: CreateGroup$Params, context?: HttpContext): Observable<StrictHttpResponse<GroupResponseWithUser>> {
    return createGroup(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createGroup$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createGroup(params: CreateGroup$Params, context?: HttpContext): Observable<GroupResponseWithUser> {
    return this.createGroup$Response(params, context).pipe(
      map((r: StrictHttpResponse<GroupResponseWithUser>): GroupResponseWithUser => r.body)
    );
  }

  /** Path part for operation `deleteGroup()` */
  static readonly DeleteGroupPath = '/groups';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteGroup()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteGroup$Response(params: DeleteGroup$Params, context?: HttpContext): Observable<StrictHttpResponse<boolean>> {
    return deleteGroup(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteGroup$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteGroup(params: DeleteGroup$Params, context?: HttpContext): Observable<boolean> {
    return this.deleteGroup$Response(params, context).pipe(
      map((r: StrictHttpResponse<boolean>): boolean => r.body)
    );
  }

  /** Path part for operation `inviteToGroup()` */
  static readonly InviteToGroupPath = '/groups/sendInvitation';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `inviteToGroup()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  inviteToGroup$Response(params: InviteToGroup$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return inviteToGroup(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `inviteToGroup$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  inviteToGroup(params: InviteToGroup$Params, context?: HttpContext): Observable<{
}> {
    return this.inviteToGroup$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `checkUserIsInAnyGroup()` */
  static readonly CheckUserIsInAnyGroupPath = '/groups/checkUserInGroup';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `checkUserIsInAnyGroup()` instead.
   *
   * This method doesn't expect any request body.
   */
  checkUserIsInAnyGroup$Response(params: CheckUserIsInAnyGroup$Params, context?: HttpContext): Observable<StrictHttpResponse<GroupResponseForExpenseService>> {
    return checkUserIsInAnyGroup(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `checkUserIsInAnyGroup$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  checkUserIsInAnyGroup(params: CheckUserIsInAnyGroup$Params, context?: HttpContext): Observable<GroupResponseForExpenseService> {
    return this.checkUserIsInAnyGroup$Response(params, context).pipe(
      map((r: StrictHttpResponse<GroupResponseForExpenseService>): GroupResponseForExpenseService => r.body)
    );
  }

  /** Path part for operation `acceptInvitation()` */
  static readonly AcceptInvitationPath = '/groups/acceptInvitation';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `acceptInvitation()` instead.
   *
   * This method doesn't expect any request body.
   */
  acceptInvitation$Response(params: AcceptInvitation$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return acceptInvitation(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `acceptInvitation$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  acceptInvitation(params: AcceptInvitation$Params, context?: HttpContext): Observable<{
}> {
    return this.acceptInvitation$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

}
