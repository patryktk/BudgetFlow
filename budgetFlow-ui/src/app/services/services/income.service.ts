/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addIncome } from '../fn/income/add-income';
import { AddIncome$Params } from '../fn/income/add-income';
import { deleteIncome } from '../fn/income/delete-income';
import { DeleteIncome$Params } from '../fn/income/delete-income';
import { getAllIncomeByUser } from '../fn/income/get-all-income-by-user';
import { GetAllIncomeByUser$Params } from '../fn/income/get-all-income-by-user';
import { getIncomeByUserByMonth } from '../fn/income/get-income-by-user-by-month';
import { GetIncomeByUserByMonth$Params } from '../fn/income/get-income-by-user-by-month';
import { getStatisticsByMonth1 } from '../fn/income/get-statistics-by-month-1';
import { GetStatisticsByMonth1$Params } from '../fn/income/get-statistics-by-month-1';
import { getSumOfIncomesByMonth } from '../fn/income/get-sum-of-incomes-by-month';
import { GetSumOfIncomesByMonth$Params } from '../fn/income/get-sum-of-incomes-by-month';
import { IncomeResponse } from '../models/income-response';
import { ResponseForStatistics } from '../models/response-for-statistics';
import { SumResponse } from '../models/sum-response';
import { updateIncome } from '../fn/income/update-income';
import { UpdateIncome$Params } from '../fn/income/update-income';

@Injectable({ providedIn: 'root' })
export class IncomeService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getAllIncomeByUser()` */
  static readonly GetAllIncomeByUserPath = '/expenses/income';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllIncomeByUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllIncomeByUser$Response(params?: GetAllIncomeByUser$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<IncomeResponse>>> {
    return getAllIncomeByUser(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllIncomeByUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllIncomeByUser(params?: GetAllIncomeByUser$Params, context?: HttpContext): Observable<Array<IncomeResponse>> {
    return this.getAllIncomeByUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<IncomeResponse>>): Array<IncomeResponse> => r.body)
    );
  }

  /** Path part for operation `updateIncome()` */
  static readonly UpdateIncomePath = '/expenses/income';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateIncome()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateIncome$Response(params: UpdateIncome$Params, context?: HttpContext): Observable<StrictHttpResponse<IncomeResponse>> {
    return updateIncome(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateIncome$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateIncome(params: UpdateIncome$Params, context?: HttpContext): Observable<IncomeResponse> {
    return this.updateIncome$Response(params, context).pipe(
      map((r: StrictHttpResponse<IncomeResponse>): IncomeResponse => r.body)
    );
  }

  /** Path part for operation `addIncome()` */
  static readonly AddIncomePath = '/expenses/income';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addIncome()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addIncome$Response(params: AddIncome$Params, context?: HttpContext): Observable<StrictHttpResponse<IncomeResponse>> {
    return addIncome(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addIncome$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addIncome(params: AddIncome$Params, context?: HttpContext): Observable<IncomeResponse> {
    return this.addIncome$Response(params, context).pipe(
      map((r: StrictHttpResponse<IncomeResponse>): IncomeResponse => r.body)
    );
  }

  /** Path part for operation `deleteIncome()` */
  static readonly DeleteIncomePath = '/expenses/income';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteIncome()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteIncome$Response(params: DeleteIncome$Params, context?: HttpContext): Observable<StrictHttpResponse<boolean>> {
    return deleteIncome(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteIncome$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteIncome(params: DeleteIncome$Params, context?: HttpContext): Observable<boolean> {
    return this.deleteIncome$Response(params, context).pipe(
      map((r: StrictHttpResponse<boolean>): boolean => r.body)
    );
  }

  /** Path part for operation `getStatisticsByMonth1()` */
  static readonly GetStatisticsByMonth1Path = '/expenses/income/statistics';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getStatisticsByMonth1()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  getStatisticsByMonth1$Response(params: GetStatisticsByMonth1$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ResponseForStatistics>>> {
    return getStatisticsByMonth1(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getStatisticsByMonth1$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  getStatisticsByMonth1(params: GetStatisticsByMonth1$Params, context?: HttpContext): Observable<Array<ResponseForStatistics>> {
    return this.getStatisticsByMonth1$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<ResponseForStatistics>>): Array<ResponseForStatistics> => r.body)
    );
  }

  /** Path part for operation `getIncomeByUserByMonth()` */
  static readonly GetIncomeByUserByMonthPath = '/expenses/income/incomeByMonth';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getIncomeByUserByMonth()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  getIncomeByUserByMonth$Response(params: GetIncomeByUserByMonth$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<IncomeResponse>>> {
    return getIncomeByUserByMonth(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getIncomeByUserByMonth$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  getIncomeByUserByMonth(params: GetIncomeByUserByMonth$Params, context?: HttpContext): Observable<Array<IncomeResponse>> {
    return this.getIncomeByUserByMonth$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<IncomeResponse>>): Array<IncomeResponse> => r.body)
    );
  }

  /** Path part for operation `getSumOfIncomesByMonth()` */
  static readonly GetSumOfIncomesByMonthPath = '/expenses/income/getSumOfIncomes';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getSumOfIncomesByMonth()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  getSumOfIncomesByMonth$Response(params: GetSumOfIncomesByMonth$Params, context?: HttpContext): Observable<StrictHttpResponse<SumResponse>> {
    return getSumOfIncomesByMonth(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getSumOfIncomesByMonth$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  getSumOfIncomesByMonth(params: GetSumOfIncomesByMonth$Params, context?: HttpContext): Observable<SumResponse> {
    return this.getSumOfIncomesByMonth$Response(params, context).pipe(
      map((r: StrictHttpResponse<SumResponse>): SumResponse => r.body)
    );
  }

}
